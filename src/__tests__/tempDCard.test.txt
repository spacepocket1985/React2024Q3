import React from 'react';
import { fireEvent, render, screen } from '@testing-library/react';



import { responseDataForChar } from './mocs/mocsData';
import { PotterDbApi } from '../service/potterDbApi';
import { CardDetails } from '../components/cardDetails/CardDetails';

vitest.mock('../../service/potterDbApi'); // Мокаем API, чтобы избежать реального вызова

describe('CardDetails component', () => {


  it('renders CardDetails component correctly', async () => {
    const mockCharacter = responseDataForChar;

    beforeEach(() => {
        (PotterDbApi.mockReturnValue({
          getCharacter: vitest.fn(),
          error: null,
          loading: false,
        });
      });

    render(
      <CardDetails
        characterId="1"
        onHideCardDetails={() => {}}
        cardDetails="Details"
      />
    );

    // Проверяем, что информация о персонаже отображается корректно
    expect(screen.getByText('Character details - Details')).toBeInTheDocument();
    expect(screen.getByAltText('Harry Potter')).toBeInTheDocument();
    expect(screen.getByText('Gender - Male')).toBeInTheDocument();
    expect(screen.getByText('born - 1980')).toBeInTheDocument();
    expect(screen.getByText('Blood status - Half-blood')).toBeInTheDocument();
    expect(screen.getByText('Species - Human')).toBeInTheDocument();
    expect(screen.getByText('Eye color - Green')).toBeInTheDocument();

    // Проверяем, что спиннер не отображается
    expect(screen.queryByTestId('spinner')).toBeNull();

    // Проверяем, что ошибка не отображается
    expect(screen.queryByTestId('error-message')).toBeNull();

    // Проверяем вызов onHideCardDetails при нажатии на кнопку закрытия
    const closeButton = screen.getByTestId('closeDetailsBtn');
    fireEvent.click(closeButton);
    expect(PotterDbApi().getCharacter).toHaveBeenCalledTimes(1);
  });
});